package in.scalive.votezy.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.scalive.votezy.entity.Candidate;
import in.scalive.votezy.entity.Vote;
import in.scalive.votezy.entity.Voter;
import in.scalive.votezy.exception.DuplicateResourceException;
import in.scalive.votezy.exception.ResourceNotFoundException;
import in.scalive.votezy.repostiory.CandidateRepository;
import in.scalive.votezy.repostiory.VoterRespository;
import jakarta.transaction.Transactional;

@Service
public class VoterService {
private VoterRespository voterRepo;
private CandidateRepository candidRepo;
@Autowired
public VoterService(VoterRespository voterRepo, CandidateRepository candidRepo) {
	this.voterRepo = voterRepo;
	this.candidRepo = candidRepo;
}
public Voter registerVoter(Voter voter)
{
   if(voterRepo.existByEmail(voter.getEmail()))
   {
	   throw new DuplicateResourceException("Voter with emailId : "+voter.getEmail()+" already exists.");
   }
   return voterRepo.save(voter);
}
public List<Voter>getAllVoters()
{
	return voterRepo.findAll();
}
public Voter getVoterById(Long id)
{
	Voter voter=voterRepo.findById(id).orElse(null);
	if(voter==null)
	{
		throw new ResourceNotFoundException("Voter with id :"+id+" not found.");
		
	}
	return voter;
}
public Voter updateVoter(Long id,Voter updatedVoter)
{
	Voter voter=voterRepo.findById(id).orElse(null);
	if(voter==null)
	{
		throw new ResourceNotFoundException("Voter with id :"+id+" not found.");
	}
	voter.setName(updatedVoter.getName());
	voter.setEmail(updatedVoter.getEmail());
	return voterRepo.save(voter);
}
@Transactional
public void deleteVoter(Long id)
{
	Voter voter=voterRepo.findById(id).orElse(null);
	if(voter==null)
	{
		throw new ResourceNotFoundException("Cannot delete with id :"+id+"as it does not exist.");
	}
	Vote vote=voter.getVote();
	if(vote!=null)
	{
		Candidate candidate=vote.getCandidate();
		candidate.setVoteCount(candidate.getVoteCount()-1);
		candidRepo.save(candidate);
	}
	voterRepo.delete(voter);
}
}
